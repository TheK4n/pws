#!/usr/bin/env python3.10

import os
import sys
from getpass import getpass
from base64 import b64encode, b64decode
import hashlib
from time import sleep

from Cryptodome.Cipher import AES
from Cryptodome.Random import get_random_bytes
from json import dump, load

__version__ = '0.1'

title = fr"""

         Password Storage
  _____   __          __   _____ 
 |  __ \  \ \        / /  / ____|
 | |__) |  \ \  /\  / /  | (___  
 |  ___/    \ \/  \/ /    \___ \ 
 | |         \  /\  /     ____) |
 |_|          \/  \/     |_____/   by TheK4n

Github  : https://github.com/TheK4n
Version : {__version__}

"""

help_title = r"""

"""
prompt = '\npws > '


SALT_LENGTH = 128  # move to settings
HASH_METHOD = 'sha512'
HASH_COUNT = 100000

shadow = '.pws_shadow'
history = '.pws_history'
services = '.pws_services'


hst_file = open(history, 'a')


class MyError(Exception):
    pass


def init_all():
    if not os.path.exists(shadow):
        write_master_passwd("root")

    if not os.path.exists(history):
        with open(history, 'w'):
            pass

    if not os.path.exists(services):
        os.mkdir(services)


def write_master_passwd(passwd):

    salt = os.urandom(SALT_LENGTH)
    key = hashlib.pbkdf2_hmac(HASH_METHOD, passwd.encode('utf-8'), salt, HASH_COUNT)

    with open(shadow, 'wb') as file:
        file.write(salt + key)


def check_master_passwd(passwd) -> bool:

    with open(shadow, 'rb') as file:
        pass_hash = file.read()

    salt_from_storage = pass_hash[:SALT_LENGTH]
    key_from_storage = pass_hash[SALT_LENGTH:]
    del pass_hash

    key = hashlib.pbkdf2_hmac(HASH_METHOD, passwd.encode('utf-8'), salt_from_storage, HASH_COUNT)
    del salt_from_storage
    return key == key_from_storage


def get_passwd_aes(passwd, master) -> dict:
    salt = get_random_bytes(AES.block_size)

    private_key = hashlib.scrypt(
        master.encode(), salt=salt, n=2 ** 14, r=8, p=1, dklen=32)

    cipher_config = AES.new(private_key, AES.MODE_GCM)

    cipher_text, tag = cipher_config.encrypt_and_digest(passwd.encode('utf-8'))

    return {
        'cipher_text': b64encode(cipher_text).decode('utf-8'),
        'salt': b64encode(salt).decode('utf-8'),
        'nonce': b64encode(cipher_config.nonce).decode('utf-8'),
        'tag': b64encode(tag).decode('utf-8')
    }


def get_passwd_from_aes(enc_dict, master) -> str:
    salt = b64decode(enc_dict['salt'])
    cipher_text = b64decode(enc_dict['cipher_text'])
    nonce = b64decode(enc_dict['nonce'])
    tag = b64decode(enc_dict['tag'])

    # generate the private key from the password and salt
    private_key = hashlib.scrypt(
        master.encode(), salt=salt, n=2 ** 14, r=8, p=1, dklen=32)

    # create the cipher config
    cipher = AES.new(private_key, AES.MODE_GCM, nonce=nonce)

    # decrypt the cipher text
    decrypted = cipher.decrypt_and_verify(cipher_text, tag)

    return decrypted.decode('utf-8')


def add_new_service(service_name, login, password):

    forbidden_symbols = r'\|/:,*?"<>+.%!@'.split()

    for sym in service_name:
        if sym in forbidden_symbols:
            raise MyError("wrong symbol")

    encrypted_passwd = get_passwd_aes(password, 'root')
    encrypted_passwd.update({"login": login})

    with open(os.path.join(services, service_name), 'w') as file:
        dump(encrypted_passwd, file, indent=4, ensure_ascii=False)


def get_service(service_name, master):
    with open(os.path.join(services, service_name), 'r') as file:
        data = load(file)
        return data["login"], get_passwd_from_aes(data, master)


def main_console():
    while True:
        command = input(prompt)
        hst_file.write(command + '\n')

        match command.split():
            case "add", service_name:
                login = input("login: ")
                passwd = getpass("password: ")
                add_new_service(service_name, login, passwd)

            case "get", service_name:
                l, p = get_service(service_name, 'root')
                print(f"Login: {l}\nPassword: {p}")

            case "q" | "exit" | "quit":
                print('\n[-] PWS stopped')
                exit(1)
            case "help":
                print(help_title)
            case _:
                print(f"\n[-] Unknown command")


def main():
    init_all()
    print(title)
    if check_master_passwd(getpass(prompt="[*] Master password: ")):
        main_console()
    else:
        print("\n[X] Wrong password", file=sys.stderr)
        sleep(5)
        exit(1)


if __name__ == '__main__':
    try:
        main()
    except EOFError:
        print('\n[-] PWS stopped', file=sys.stderr)
        exit(1)
    except KeyboardInterrupt:
        print('\n[-] PWS stopped', file=sys.stderr)
        exit(130)
    finally:
        hst_file.close()
